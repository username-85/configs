#! /usr/bin/env python3
# based on https://github.com/olivierlemoal/i3-swap-focus

import os
import asyncio
import signal
import sys
import atexit
from i3ipc.aio import Connection

pid_file = '{XDG_RUNTIME_DIR}/swap_focus.pid'.format_map(os.environ)

# TODO init at main on runtime
workspaces = {}
workspaces["1"] = []
workspaces["2"] = []
workspaces["hidden"] = []
workspaces["tmp"] = []

async def on_signal(i3):
    ws_id = (await i3.get_tree()).find_focused().workspace().id
    ws_name = (await i3.get_tree()).find_focused().workspace().name
    windows = workspaces.get(ws_name);

    if not windows:
        return

    window_id = windows.pop()
    container = (await i3.get_tree()).find_by_id(window_id)
    if not container:
        windows.append(window_id)
        return

    cmd = f'[con_id={window_id}] focus'
    await i3.command(cmd)


def exit_handler():
    os.remove(pid_file)


async def on_window(i3, event):
    if event.change != 'focus':
        return
    if event.container.floating == "user_on" or event.container.floating == "auto_on":
        return

    ws_name = (await i3.get_tree()).find_focused().workspace().name
    windows = workspaces.get(ws_name);
    if not windows or event.container.id != windows[0]:
        windows.insert(0, event.container.id)
        if len(windows) > 2:
            del windows[2:]


async def main():
    with open(pid_file, 'w') as file:
        file.write(str(os.getpid()))
    atexit.register(exit_handler)

    i3 = await Connection(auto_reconnect=True).connect()

    loop = asyncio.get_event_loop()
    loop.add_signal_handler(signal.SIGUSR1, lambda: asyncio.create_task(on_signal(i3)))
    i3.on('window::focus', on_window)
    await i3.main()

asyncio.run(main())
